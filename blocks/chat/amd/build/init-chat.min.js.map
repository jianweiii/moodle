{"version":3,"sources":["../src/init-chat.js"],"names":["messageWindow","document","getElementById","messages","connectChat","token","Twilio","Conversations","Client","create","conversationsClient","conversationJoined","on","state","connectionStatus","innerHTML","conversation","loadMessages","message","messageBubble","author","body","sendMessageInput","addEventListener","event","preventDefault","messageInput","window","console","log","value","sendMessage","getMessages","then","messageList","items","forEach","item","catch","err","error","identity","messageContainer","createElement","className","messageAuthor","textContent","messageBody","appendChild"],"mappings":"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","sourcesContent":["let messageWindow = document.getElementById(\"messages\");\nlet messages = [];\n// let newMessage = \"\";\n\n// Include cdn script for Twilio, ignore warnings\nexport const connectChat = async (token, identity) => {\n    let conversationsClient = await Twilio.Conversations.Client.create(token);\n    let conversationJoined = null;\n\n    // Check connection state\n    conversationsClient.on(\"connectionStateChanged\", (state) => {\n        let connectionStatus = document.getElementById(\"connection-status\");\n        if (state === \"connecting\") {\n            connectionStatus.innerHTML = \"Connecting\";\n        }\n        if (state === \"connected\") {\n            connectionStatus.innerHTML = \"Connected\";\n        }\n        if (state === \"disconnecting\") {\n            connectionStatus.innerHTML = \"Disconnecting\";\n        }\n        if (state === \"disconnected\") {\n            connectionStatus.innerHTML = \"Disconnected\";\n        }\n        if (state === \"denied\") {\n            connectionStatus.innerHTML = \"Denied\";\n        }\n    });\n\n    // Upon joining conversation, populate messages and load it into message window\n    conversationsClient.on(\"conversationJoined\", (conversation) => {\n        conversationJoined = conversation;\n        loadMessages(conversation);\n    });\n\n    // When new messages are added, update message window\n    conversationsClient.on(\"messageAdded\", message => {\n        messageBubble(message.author, message.body);\n    })\n\n    // Set up send message button to send message input to conversation\n    let sendMessageInput = document.getElementById(\"btn-send-message\");\n    sendMessageInput.addEventListener(\"click\", event => {\n        event.preventDefault();\n        let messageInput = document.getElementById(\"user-typed-message\");\n        window.console.log(messageInput.value);\n        conversationJoined.sendMessage(messageInput.value);\n        messageInput.value = \"\";\n    });\n};\n\n\nconst loadMessages = (conversationJoined) => {\n    conversationJoined.getMessages()\n        .then( async (messageList) => {\n            messages = await messageList.items;\n            // window.console.log(messages);\n            messages.forEach( item => {\n                messageBubble(item.author, item.body);\n            });\n        })\n        .catch( err => {\n            window.console.error(\"Couldn't fetch messages\", err);\n        });\n};\n\nconst messageBubble = (identity, message) => {\n    let messageContainer = document.createElement(\"div\");\n    messageContainer.className = \"message-container\";\n    let messageAuthor = document.createElement(\"div\");\n    messageAuthor.className = \"message-author\";\n    messageAuthor.textContent = identity;\n    let messageBody = document.createElement(\"div\");\n    messageBody.className = \"message-body\";\n    messageBody.textContent = message;\n    messageContainer.appendChild(messageAuthor);\n    messageContainer.appendChild(messageBody);\n    messageWindow.appendChild(messageContainer);\n};"],"file":"init-chat.min.js"}