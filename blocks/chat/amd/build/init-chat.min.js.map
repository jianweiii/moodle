{"version":3,"sources":["../src/init-chat.js"],"names":["messageWindow","document","getElementById","userAdminRole","messageToDelete","conversationJoined","connectChat","token","convId","isAdmin","Twilio","window","Conversations","Client","create","conversationsClient","initDeleteButtons","on","state","connectionStatus","innerHTML","getConversationBySid","then","conversation","loadMessages","message","messageBubble","author","body","sid","index","deleteMessageBubble","sendMessageInput","addEventListener","event","preventDefault","messageInput","sendMessage","value","getMessages","messageList","items","messages","forEach","item","catch","err","console","error","scrollMessage","lastChild","scrollIntoView","identity","messageSid","messageContainer","createElement","className","id","messageAuthor","textContent","messageBody","appendChild","toggleDeleteMenu","menuToggle","classList","contains","remove","add","deleteMessageButton","deleteParticipantButton","alert","parentNode","removeChild"],"mappings":"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","sourcesContent":["import { deleteMessage, deleteParticipant } from './menu-button';\n\nlet messageWindow = document.getElementById(\"messages\");\nlet userAdminRole = null;\nlet messageToDelete = null;\nlet conversationJoined = null;\n\n/**\n * Core function that establishes connection with Twilio API\n * @param {String} token\n * @param {Boolean} isAdmin\n */\nexport const connectChat = async (token, convId, isAdmin) => {\n    const Twilio = window.Twilio;\n    let conversationsClient = await Twilio.Conversations.Client.create(token);\n    userAdminRole = isAdmin;\n\n    initDeleteButtons();\n    deleteParticipant();\n\n    // Check connection state\n    conversationsClient.on(\"connectionStateChanged\", (state) => {\n        let connectionStatus = document.getElementById(\"connection-status\");\n        if (state === \"connecting\") {\n            connectionStatus.innerHTML = \"Connecting\";\n        }\n        if (state === \"connected\") {\n            connectionStatus.innerHTML = \"Connected\";\n        }\n        if (state === \"disconnecting\") {\n            connectionStatus.innerHTML = \"Disconnecting\";\n        }\n        if (state === \"disconnected\") {\n            connectionStatus.innerHTML = \"Disconnected\";\n        }\n        if (state === \"denied\") {\n            connectionStatus.innerHTML = \"Denied\";\n        }\n    });\n\n    // // Upon joining conversation, populate messages and load it into message window\n    // conversationsClient.on(\"conversationJoined\", (conversation) => {\n    //     window.console.log(conversation);\n    //     conversationJoined = [...conversationJoined, conversation];\n    //     window.console.log(conversationJoined);\n    //     loadMessages(conversation);\n    // });\n    conversationsClient.getConversationBySid(convId).then(conversation => {\n        conversationJoined = conversation;\n        loadMessages(conversationJoined);\n    });\n\n    // When new messages are added, update message window\n    conversationsClient.on(\"messageAdded\", message => {\n        messageBubble(message.author, message.body, message.sid, message.index);\n    });\n\n    // When messages are removed, update message window\n    conversationsClient.on(\"messageRemoved\", message => {\n        deleteMessageBubble(message.index);\n    });\n\n    // Set up send message button to send message input to conversation\n    let sendMessageInput = document.getElementById(\"btn-send-message\");\n    sendMessageInput.addEventListener(\"click\", event => {\n        event.preventDefault();\n        let messageInput = document.getElementById(\"user-typed-message\");\n        conversationJoined.sendMessage(messageInput.value);\n        messageInput.value = \"\";\n    });\n};\n\n/**\n * After joining a conversation, load individual messages as a message bubble\n * @param {*} conversationJoined\n */\nconst loadMessages = async (conversationJoined) => {\n    await conversationJoined.getMessages()\n        .then( async (messageList) => {\n            let messages = await messageList.items;\n            messages.forEach( item => {\n                messageBubble(item.author, item.body, item.sid, item.index);\n            });\n        })\n        .catch( err => {\n            window.console.error(\"Couldn't fetch messages\", err);\n        });\n    let scrollMessage = document.getElementById(\"messages\");\n    try {\n        scrollMessage.lastChild.scrollIntoView();\n    }\n    catch(err) {\n        // catches it when new convo is created and 0 messages currently\n    }\n};\n\n/**\n * Each message bubble has:\n * <div class=\"message-container\" id=\"index\">\n *     <div class=\"message-author\"></div>\n *     <div class=\"message-body\"></div>\n * </div>\n *\n * Only admin has the rights to invoke delete functionality\n *\n * @param {*} identity\n * @param {*} message\n * @param {*} messageSid\n * @param {*} index\n */\nconst messageBubble = (identity, message, messageSid, index) => {\n    let messageContainer = document.createElement(\"div\");\n    messageContainer.className = \"message-container\";\n    messageContainer.id = index;\n    let messageAuthor = document.createElement(\"div\");\n    messageAuthor.className = \"message-author\";\n    messageAuthor.textContent = identity;\n    let messageBody = document.createElement(\"div\");\n    messageBody.className = \"message-body\";\n    messageBody.textContent = message;\n    messageContainer.appendChild(messageAuthor);\n    messageContainer.appendChild(messageBody);\n\n    // Give admin roles options to configure messages\n    if (userAdminRole) {\n        messageContainer.addEventListener(\"click\", event => {\n            event.preventDefault();\n            toggleDeleteMenu();\n            messageToDelete = messageSid;\n        });\n    }\n    messageWindow.appendChild(messageContainer);\n};\n\n/**\n * Toggles show and hide for delete menu\n */\nconst toggleDeleteMenu = () => {\n    let menuToggle = document.getElementById(\"message-admin-opt\");\n    if (menuToggle.classList.contains(\"hide\")) {\n        menuToggle.classList.remove(\"hide\");\n        menuToggle.classList.add(\"show\");\n    } else if (menuToggle.classList.contains(\"show\")) {\n        menuToggle.classList.remove(\"show\");\n        menuToggle.classList.add(\"hide\");\n    }\n};\n\n/**\n * Initiate event listeners for delete buttons inside delete menu\n */\nconst initDeleteButtons = () => {\n    let deleteMessageButton = document.getElementById(\"delete-message\");\n    deleteMessageButton.addEventListener(\"click\", event => {\n        event.preventDefault();\n        deleteMessage(messageToDelete);\n    });\n\n    let deleteParticipantButton = document.getElementById(\"delete-participant\");\n    deleteParticipantButton.addEventListener(\"click\", event => {\n        event.preventDefault();\n        window.alert(\"Delete Participant Clicked!\");\n    });\n};\n\n/**\n * Deletes message bubble with corresponding index number\n * @param {*} index\n */\nconst deleteMessageBubble = (index) => {\n    let messageBubble = document.getElementById(index);\n    messageBubble.parentNode.removeChild(messageBubble);\n};"],"file":"init-chat.min.js"}