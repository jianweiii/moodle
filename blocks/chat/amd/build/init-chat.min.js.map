{"version":3,"sources":["../src/init-chat.js"],"names":["messageWindow","document","getElementById","userAdminRole","messageToDelete","participantToDelete","participantIdentity","conversationJoined","connectChat","token","convId","isAdmin","Twilio","window","Conversations","Client","create","conversationsClient","initDeleteButtons","on","state","connectionStatus","innerHTML","messageNode","querySelectorAll","forEach","messageBubble","remove","getConversationBySid","then","conversation","loadMessages","catch","err","console","log","message","author","body","sid","index","participantSid","deleteMessageBubble","sendMessageInput","addEventListener","event","preventDefault","messageInput","sendMessage","value","getMessages","messageList","items","messages","item","error","identity","messageSid","messageContainer","createElement","className","id","messageAuthor","textContent","messageBody","appendChild","toggleDeleteMenu","clientX","clientY","leftPos","topPos","menuToggle","getBlockChat","getElementsByClassName","blockChatX","getBoundingClientRect","x","blockChatY","y","style","left","top","classList","contains","add","deleteMessageButton","deleteParticipantButton","parentNode","removeChild"],"mappings":"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","sourcesContent":["import { deleteMessage, deleteParticipant } from './menu-button';\n\nlet messageWindow = document.getElementById(\"messages\");\nlet userAdminRole = null;\nlet messageToDelete = null;\nlet participantToDelete = null;\nlet participantIdentity = null;\nlet conversationJoined = null;\n// let clickedMessageContainer = null;\n\n/**\n * Core function that establishes connection with Twilio API\n * @param {String} token\n * @param {Boolean} isAdmin\n */\nexport const connectChat = async (token, convId, isAdmin) => {\n    userAdminRole = isAdmin;\n\n    // Connect to Twilio\n    const Twilio = window.Twilio;\n    let conversationsClient = await Twilio.Conversations.Client.create(token);\n\n    initDeleteButtons();\n\n    // Check connection state\n    conversationsClient.on(\"connectionStateChanged\", (state) => {\n        let connectionStatus = document.getElementById(\"connection-status\");\n        if (state === \"connecting\") {\n            connectionStatus.innerHTML = \"Connecting\";\n        }\n        if (state === \"connected\") {\n            connectionStatus.innerHTML = \"Connected\";\n        }\n        if (state === \"disconnecting\") {\n            connectionStatus.innerHTML = \"Disconnecting\";\n        }\n        if (state === \"disconnected\") {\n            connectionStatus.innerHTML = \"Disconnected\";\n            // remove all nodes inside message window\n            let messageNode = document.getElementById(\"messages\");\n            messageNode.querySelectorAll('*').forEach(messageBubble => messageBubble.remove());\n        }\n        if (state === \"denied\") {\n            connectionStatus.innerHTML = \"Denied\";\n        }\n    });\n\n    // Get conversation's messages\n    conversationsClient.getConversationBySid(convId)\n    .then(conversation => {\n        conversationJoined = conversation;\n        loadMessages(conversationJoined);\n    })\n    .catch(err => {\n        window.console.log(\"Failed to get conversation:\" + err);\n    });\n\n    // When new messages are added, update message window\n    conversationsClient.on(\"messageAdded\", message => {\n        messageBubble(message.author, message.body, message.sid, message.index, message.participantSid);\n    });\n\n    // When messages are removed, update message window\n    conversationsClient.on(\"messageRemoved\", message => {\n        deleteMessageBubble(message.index);\n    });\n\n    // Set up send message button to send message input to conversation\n    let sendMessageInput = document.getElementById(\"btn-send-message\");\n    sendMessageInput.addEventListener(\"click\", event => {\n        event.preventDefault();\n        let messageInput = document.getElementById(\"user-typed-message\");\n        conversationJoined.sendMessage(messageInput.value);\n        messageInput.value = \"\";\n    });\n};\n\n/**\n * After joining a conversation, load individual messages as a message bubble\n * @param {*} conversationJoined\n */\nconst loadMessages = async (conversationJoined) => {\n    await conversationJoined.getMessages()\n        .then( async (messageList) => {\n            let messages = await messageList.items;\n            messages.forEach( item => {\n                messageBubble(item.author, item.body, item.sid, item.index, item.participantSid);\n            });\n        })\n        .catch( err => {\n            window.console.error(\"Couldn't fetch messages\", err);\n        });\n};\n\n/**\n * Each message bubble has:\n * <div class=\"message-container\" id=\"index\">\n *     <div class=\"message-author\"></div>\n *     <div class=\"message-body\"></div>\n * </div>\n *\n * Only admin has the rights to invoke delete functionality\n *\n * @param {*} identity\n * @param {*} message\n * @param {*} messageSid\n * @param {*} index\n */\nconst messageBubble = (identity, message, messageSid, index, participantSid) => {\n    let messageContainer = document.createElement(\"div\");\n    messageContainer.className = \"message-container\";\n    messageContainer.id = index;\n    let messageAuthor = document.createElement(\"div\");\n    messageAuthor.className = \"message-author\";\n    messageAuthor.textContent = identity;\n    let messageBody = document.createElement(\"div\");\n    messageBody.className = \"message-body\";\n    messageBody.textContent = message;\n    messageContainer.appendChild(messageAuthor);\n    messageContainer.appendChild(messageBody);\n\n    // Give admin roles options to configure messages\n    if (userAdminRole) {\n        messageContainer.addEventListener(\"click\", event => {\n            event.preventDefault();\n            toggleDeleteMenu(event.clientX, event.clientY);\n            // clickedMessageContainer = messageContainer;\n            messageToDelete = messageSid;\n            participantToDelete = participantSid;\n            participantIdentity = identity;\n        });\n    }\n    messageWindow.appendChild(messageContainer);\n};\n\n/**\n * Toggles show and hide for delete menu\n */\nconst toggleDeleteMenu = (leftPos, topPos) => {\n    let menuToggle = document.getElementById(\"message-admin-opt\");\n    let getBlockChat = document.getElementsByClassName(\"block_chat\");\n    let blockChatX = getBlockChat[0].getBoundingClientRect().x;\n    let blockChatY = getBlockChat[0].getBoundingClientRect().y;\n    menuToggle.style.left = \"calc(\" + (leftPos+20) + \"px - \" + blockChatX + \"px)\";\n    menuToggle.style.top = \"calc(\" + (topPos-20) + \"px - \" + blockChatY + \"px)\";\n    if (menuToggle.classList.contains(\"hide\")) {\n        menuToggle.classList.remove(\"hide\");\n        menuToggle.classList.add(\"show\");\n    } else if (menuToggle.classList.contains(\"show\")) {\n        menuToggle.classList.remove(\"show\");\n        menuToggle.classList.add(\"hide\");\n    }\n};\n\n/**\n * Initiate event listeners for delete buttons inside delete menu\n */\nconst initDeleteButtons = () => {\n    let deleteMessageButton = document.getElementById(\"delete-message\");\n    deleteMessageButton.addEventListener(\"click\", event => {\n        event.preventDefault();\n        deleteMessage(messageToDelete);\n        let menuToggle = document.getElementById(\"message-admin-opt\");\n        menuToggle.classList.remove(\"show\");\n        menuToggle.classList.add(\"hide\");\n    });\n\n    let deleteParticipantButton = document.getElementById(\"delete-participant\");\n    deleteParticipantButton.addEventListener(\"click\", event => {\n        event.preventDefault();\n        deleteParticipant(participantToDelete, participantIdentity);\n        let menuToggle = document.getElementById(\"message-admin-opt\");\n        menuToggle.classList.remove(\"show\");\n        menuToggle.classList.add(\"hide\");\n    });\n};\n\n/**\n * Deletes message bubble with corresponding index number\n * @param {*} index\n */\nconst deleteMessageBubble = (index) => {\n    let messageBubble = document.getElementById(index);\n    messageBubble.parentNode.removeChild(messageBubble);\n};"],"file":"init-chat.min.js"}