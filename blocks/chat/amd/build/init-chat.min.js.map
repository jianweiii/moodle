{"version":3,"sources":["../src/init-chat.js"],"names":["messageWindow","document","getElementById","userAdminRole","messageToDelete","connectChat","token","isAdmin","Twilio","window","Conversations","Client","create","conversationsClient","conversationJoined","initDeleteButtons","on","state","connectionStatus","innerHTML","conversation","loadMessages","message","messageBubble","author","body","sid","index","deleteMessageBubble","sendMessageInput","addEventListener","event","preventDefault","messageInput","sendMessage","value","getMessages","then","messageList","items","messages","forEach","item","catch","err","console","error","scrollMessage","lastChild","scrollIntoView","identity","messageSid","messageContainer","createElement","className","id","messageAuthor","textContent","messageBody","appendChild","toggleDeleteMenu","menuToggle","classList","contains","remove","add","deleteMessageButton","deleteParticipantButton","alert","parentNode","removeChild"],"mappings":"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","sourcesContent":["import { deleteMessage, deleteParticipant } from './menu-button';\n\nlet messageWindow = document.getElementById(\"messages\");\nlet userAdminRole = null;\nlet messageToDelete = null;\n\n/**\n * Core function that establishes connection with Twilio API\n * @param {String} token\n * @param {Boolean} isAdmin\n */\nexport const connectChat = async (token, isAdmin) => {\n    const Twilio = window.Twilio;\n    let conversationsClient = await Twilio.Conversations.Client.create(token);\n    let conversationJoined = null;\n    userAdminRole = isAdmin;\n\n    initDeleteButtons();\n    deleteParticipant();\n\n    // Check connection state\n    conversationsClient.on(\"connectionStateChanged\", (state) => {\n        let connectionStatus = document.getElementById(\"connection-status\");\n        if (state === \"connecting\") {\n            connectionStatus.innerHTML = \"Connecting\";\n        }\n        if (state === \"connected\") {\n            connectionStatus.innerHTML = \"Connected\";\n        }\n        if (state === \"disconnecting\") {\n            connectionStatus.innerHTML = \"Disconnecting\";\n        }\n        if (state === \"disconnected\") {\n            connectionStatus.innerHTML = \"Disconnected\";\n        }\n        if (state === \"denied\") {\n            connectionStatus.innerHTML = \"Denied\";\n        }\n    });\n\n    // Upon joining conversation, populate messages and load it into message window\n    conversationsClient.on(\"conversationJoined\", (conversation) => {\n        conversationJoined = conversation;\n        loadMessages(conversation);\n    });\n\n    // When new messages are added, update message window\n    conversationsClient.on(\"messageAdded\", message => {\n        messageBubble(message.author, message.body, message.sid, message.index);\n    });\n\n    // When messages are removed, update message window\n    conversationsClient.on(\"messageRemoved\", message => {\n        deleteMessageBubble(message.index);\n    });\n\n    // Set up send message button to send message input to conversation\n    let sendMessageInput = document.getElementById(\"btn-send-message\");\n    sendMessageInput.addEventListener(\"click\", event => {\n        event.preventDefault();\n        let messageInput = document.getElementById(\"user-typed-message\");\n        conversationJoined.sendMessage(messageInput.value);\n        messageInput.value = \"\";\n    });\n};\n\n/**\n * After joining a conversation, load individual messages as a message bubble\n * @param {*} conversationJoined\n */\nconst loadMessages = async (conversationJoined) => {\n    await conversationJoined.getMessages()\n        .then( async (messageList) => {\n            let messages = await messageList.items;\n            messages.forEach( item => {\n                messageBubble(item.author, item.body, item.sid, item.index);\n            });\n        })\n        .catch( err => {\n            window.console.error(\"Couldn't fetch messages\", err);\n        });\n    let scrollMessage = document.getElementById(\"messages\");\n    scrollMessage.lastChild.scrollIntoView();\n};\n\n/**\n * Each message bubble has:\n * <div class=\"message-container\" id=\"index\">\n *     <div class=\"message-author\"></div>\n *     <div class=\"message-body\"></div>\n * </div>\n *\n * Only admin has the rights to invoke delete functionality\n *\n * @param {*} identity\n * @param {*} message\n * @param {*} messageSid\n * @param {*} index\n */\nconst messageBubble = (identity, message, messageSid, index) => {\n    let messageContainer = document.createElement(\"div\");\n    messageContainer.className = \"message-container\";\n    messageContainer.id = index;\n    let messageAuthor = document.createElement(\"div\");\n    messageAuthor.className = \"message-author\";\n    messageAuthor.textContent = identity;\n    let messageBody = document.createElement(\"div\");\n    messageBody.className = \"message-body\";\n    messageBody.textContent = message;\n    messageContainer.appendChild(messageAuthor);\n    messageContainer.appendChild(messageBody);\n\n    // Give admin roles options to configure messages\n    if (userAdminRole) {\n        messageContainer.addEventListener(\"click\", event => {\n            event.preventDefault();\n            toggleDeleteMenu();\n            messageToDelete = messageSid;\n        });\n    }\n    messageWindow.appendChild(messageContainer);\n};\n\n/**\n * Toggles show and hide for delete menu\n */\nconst toggleDeleteMenu = () => {\n    let menuToggle = document.getElementById(\"message-admin-opt\");\n    if (menuToggle.classList.contains(\"hide\")) {\n        menuToggle.classList.remove(\"hide\");\n        menuToggle.classList.add(\"show\");\n    } else if (menuToggle.classList.contains(\"show\")) {\n        menuToggle.classList.remove(\"show\");\n        menuToggle.classList.add(\"hide\");\n    }\n};\n\n/**\n * Initiate event listeners for delete buttons inside delete menu\n */\nconst initDeleteButtons = () => {\n    let deleteMessageButton = document.getElementById(\"delete-message\");\n    deleteMessageButton.addEventListener(\"click\", event => {\n        event.preventDefault();\n        deleteMessage(messageToDelete);\n    });\n\n    let deleteParticipantButton = document.getElementById(\"delete-participant\");\n    deleteParticipantButton.addEventListener(\"click\", event => {\n        event.preventDefault();\n        window.alert(\"Delete Participant Clicked!\");\n    });\n};\n\n/**\n * Deletes message bubble with corresponding index number\n * @param {*} index\n */\nconst deleteMessageBubble = (index) => {\n    let messageBubble = document.getElementById(index);\n    messageBubble.parentNode.removeChild(messageBubble);\n};"],"file":"init-chat.min.js"}